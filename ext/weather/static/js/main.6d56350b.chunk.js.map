{"version":3,"sources":["api/WeatherAPIWrapper.js","utils.js","components/TimeIcon.jsx","assets/Compass-Arrow.svg","components/HightlightsArea.jsx","components/TodayWeather.jsx","state.js","screens/MainScreen.jsx","App.js","index.js"],"names":["API","getCityByName","name","a","fetch","response","status","data","json","getCityByGeocalization","latitude","longetude","getWeatherDataById","id","weatherData","location","getIconFromAbbreviation","abbr","dateFromString","date","Date","parse","dateFormat","dayOfWeek","getUTCDay","month","getUTCMonth","getUTCDate","celciusToFahrenheit","value","TimeIcon","formattedDateStr","maxTempture","minTempture","useFahrenheit","tempSufix","icon","Math","round","className","src","alt","HightlightsArea","state","setState","todayData","rotation","wind_direction","onClick","useCelsius","disabled","map","d","i","applicable_date","max_temp","min_temp","weather_state_abbr","style","transform","Compass","wind_direction_compass","humidity","width","visibility","air_pressure","TodayWeather","setWeatherData","onGps","temperature","the_temp","onSearchBtnClicked","event","preventDefault","searchInput","input","trim","toLocaleLowerCase","matches","lenght","alert","cities","c","options","selectedId","WeatherScreen","searchEnabled","weather_state_name","SearchScreen","onChange","target","placeholder","type","val","city","initialState","wind_speed","gpsCoords","MainScreen","props","useState","setGPSLocation","coords","longitude","nearestLocation","locationName","askForGPS","navigator","geolocation","watchPosition","pos","weather","loc","length","useEffect","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d56350b.chunk.js","sourcesContent":["// OLD cors: \r\n// const API = \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/\"\r\nconst API = \"https://api.allorigins.win/raw?url=https://www.metaweather.com/api/\"\r\n\r\n/**\r\n * given a name, get all cities that matches it\r\n * @returns array of objects that have a 'title' and 'woeid' attributes\r\n */\r\nexport async function getCityByName(name) {\r\n    const response = await fetch(API + '/location/search/?query=' + name)\r\n    if (response.status !== 200)\r\n        return []\r\n    \r\n    const data = response.json()\r\n    return data !== [] ? data : []\r\n}\r\n\r\n/**\r\n * given a postition, get all cities that near from it\r\n * @returns array of objects that have a 'title' and 'woeid' attributes\r\n */\r\nexport async function getCityByGeocalization(latitude, longetude) {\r\n    const response = await fetch(API + `/location/search/?lattlong=${latitude},${longetude}`)\r\n    if (response.status !== 200)\r\n        return []\r\n        \r\n    const data = await response.json()\r\n    return data\r\n}\r\n\r\n/**\r\n * given an id, get all relevant weather data from the city inside of the attribute \r\n * 'consolidated_weather' plus the value of 'title' as 'location'\r\n * @returns array of objects with the weather data, with each representating a day\r\n */\r\nexport async function getWeatherDataById(id) {\r\n    const response = await fetch(API + '/location/' + id)\r\n    if (response.status !== 200)\r\n        return []\r\n    \r\n    const data = await response.json()\r\n    if (data['detail'])\r\n        return []\r\n\r\n    return { weatherData: data['consolidated_weather'], location: data['title']}\r\n}\r\n\r\nexport function getIconFromAbbreviation(abbr) {\r\n    return `https://www.metaweather.com//static/img/weather/${abbr}.svg`\r\n}","export const dateFromString = (date) => new Date(Date.parse(date))\r\n\r\n/**\r\n * @returns return a UTC formated string in the format 'Day-of-month-abbreviated, day-number Month-abbreviated'\r\n */\r\nexport function dateFormat(date) {\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Ju', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n    const dayOfWeek = days[date.getUTCDay()]\r\n    const month = months[date.getUTCMonth()] \r\n    return `${dayOfWeek}, ${date.getUTCDate()} ${month}`\r\n}\r\n\r\nexport function celciusToFahrenheit(value) {\r\n    return (value * (9/5) + 32)\r\n}\r\n","import { getIconFromAbbreviation } from \"../api/WeatherAPIWrapper\"\r\nimport { celciusToFahrenheit } from \"../utils\"\r\n\r\n/*\r\n * Shows the temperature a day. Uses the same css than HightlightsArea\r\n */\r\nexport default function TimeIcon({ formattedDateStr, maxTempture, minTempture, useFahrenheit, abbr = 'c'}) {\r\n    // TODO: since this is only getting feed, pass the min and max with the correct temp type (celcius, faren..)\r\n    const tempSufix = useFahrenheit ? 'F' : 'C'\r\n    const icon = getIconFromAbbreviation(abbr)\r\n    \r\n    maxTempture = Math.round(maxTempture)\r\n    minTempture = Math.round(minTempture)\r\n    if (useFahrenheit) {\r\n        maxTempture = Math.round(celciusToFahrenheit(maxTempture))\r\n        minTempture = Math.round(celciusToFahrenheit(minTempture))\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-wrapper\">\r\n            <p>{formattedDateStr}</p>\r\n            <img \r\n                className=\"timeicon-img\"\r\n                src={icon} \r\n                alt=\"figure representing the weather\" />\r\n            \r\n            <div className=\"weather-temp\">\r\n                <p>{maxTempture}º{tempSufix}</p>\r\n                <p>{minTempture}º{tempSufix}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/Compass-Arrow.5bc621d9.svg\";","import { dateFormat, dateFromString } from \"../utils\"\r\nimport TimeIcon from \"./TimeIcon\"\r\nimport './HightlightsArea.css'\r\nimport Compass from \"../assets/Compass-Arrow.svg\"\r\n\r\nexport default function HightlightsArea({state, setState, weatherData}) {\r\n    const todayData = weatherData[0]\r\n    const ceisiusBtnClick = () => setState({...state, useCelsius: true})\r\n    const fahrenheitBtnClick = () => setState({...state, useCelsius: false})\r\n    const rotation = `rotate(${todayData.wind_direction}deg)`\r\n\r\n    return (\r\n        <div className=\"hightlights-area-wrapper\">              \r\n            <div className=\"daily-weather-content\"> {/* so i can move everything w/o doing so with the bg */}\r\n                \r\n                <div className=\"temperature-kind-wrapper\">\r\n                    <button onClick={ceisiusBtnClick} disabled={state.useCelsius} >C</button>\r\n                    <button onClick={fahrenheitBtnClick} disabled={!state.useCelsius} >F</button>\r\n                </div>\r\n                \r\n                <div className=\"daily-weather-div\">\r\n                    {state.weatherData.map((d, i)=> \r\n                        <TimeIcon\r\n                            useFahrenheit={!state.useCelsius}\r\n                            formattedDateStr={\r\n                                i === 0 \r\n                                    ? 'Tomorrow'\r\n                                    : dateFormat(dateFromString(d.applicable_date))\r\n                            }\r\n                            maxTempture={d.max_temp}\r\n                            minTempture={d.min_temp}\r\n                            abbr={d.weather_state_abbr} />)}\r\n                </div>\r\n\r\n                <h1><strong>Today's Hightlights</strong></h1>\r\n\r\n                <div className=\"highlights\">\r\n\r\n                    <div className=\"highlight wind-status\">\r\n                            <p>Wind Status</p>\r\n                                <span className=\"sufix\">\r\n                                    <span className=\"prefix\">{Math.round(todayData.wind_direction)}</span>\r\n                                    mph\r\n                                </span>\r\n                            <div className=\"compass-wrapper\">\r\n                                <img \r\n                                    className=\"compass\" \r\n                                    alt=\"compass arrow that points to wind direction\"\r\n                                    style={{transform: rotation }}\r\n                                    src={Compass}\r\n                                    />\r\n\r\n                                <p>{todayData.wind_direction_compass}</p>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"highlight humidity\">\r\n                            <p>Humidity</p>\r\n                            <span className=\"sufix\">\r\n                                <span className=\"prefix\">{todayData.humidity}</span>\r\n                                %\r\n                            </span>\r\n                            <div className=\"gauge-wrapper\">\r\n                                <div className=\"gauge-labels\">\r\n                                    <span>0</span>\r\n                                    <span>50</span>\r\n                                    <span>100</span>\r\n                                </div>\r\n                                <div className=\"gauge\">\r\n                                    <div \r\n                                        className=\"gauge-inside\"\r\n                                        style={{width: todayData.humidity + '%'}}\r\n                                        >\r\n                                        &nbsp;\t\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"gauge-percent-label\">\r\n                                    <span>%</span>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n\r\n                    <div className=\"highlight visibility\">\r\n                        <p>Visibility</p>\r\n                        <span className=\"sufix\">\r\n                            <span className=\"prefix\">{Math.round(todayData.visibility)}</span>miles\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"highlight Air pressure\">\r\n                        <p>Wind Status</p>\r\n                        <span className=\"sufix\">\r\n                            <span className=\"prefix\">{Math.round(todayData.air_pressure)}</span>\r\n                            mb\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { getCityByName, getIconFromAbbreviation } from '../api/WeatherAPIWrapper'\r\nimport { dateFormat, dateFromString } from '../utils'\r\nimport { Fragment } from \"react\"\r\nimport { celciusToFahrenheit } from '../utils'\r\nimport './TodayWeather.css'\r\n\r\n/**\r\n *  Displays the current wheather and search the location to display\r\n */\r\nexport default function TodayWeather({state, setState, setWeatherData, onGps}) {\r\n    const todayData = state.weatherData[0]\r\n    let date = dateFormat(dateFromString(todayData.applicable_date))\r\n    const icon = getIconFromAbbreviation(todayData.weather_state_abbr)\r\n    let temperature = state.useCelsius ? todayData.the_temp : celciusToFahrenheit(todayData.the_temp)\r\n    temperature = Math.round(temperature)\r\n    \r\n    const onSearchPlacesBtnClicked = (event) => { \r\n        setState({...state, searchEnabled: true})\r\n    }\r\n    \r\n    const onSearchBtnClicked = async (event) => {\r\n        event.preventDefault()\r\n        const searchInput = state.input.trim().toLocaleLowerCase()\r\n        const matches = await getCityByName(searchInput)\r\n        if (matches.lenght === 0) {\r\n            alert('Can\\'t retrieve the weather data at the moment. Try again later.')\r\n            return\r\n        }\r\n        \r\n        const cities = matches.map(c => { \r\n            return {'city': c['title'], 'id': c['woeid']}\r\n        })\r\n        setState({...state, options: cities, selectedId: cities[0].id})\r\n    }\r\n    \r\n    const onCloseButtonClicked = (event) => {\r\n        setWeatherData(state.selectedId)\r\n        // since this state will be overriten if the setWeather fully succeeds\r\n        // so we set to false there, and here ONLY if setWeather don't complete its\r\n        // logic\r\n        if (state.searchEnabled)\r\n            setState({...state, searchEnabled: false})\r\n    }\r\n\r\n    const onSelectedOption = (event) => {\r\n        setState({...state, selectedId: event.target.value})\r\n    }\r\n\r\n    const onSearchChanged = (event) => {\r\n        const value = {...state, input:event.target.value}\r\n        setState(value)\r\n    }\r\n\r\n    const WeatherScreen = (\r\n        <Fragment>\r\n            <div className=\"today-weather-search-loc-wrapper\">\r\n                <button className=\"today-weather-btn\" onClick={onSearchPlacesBtnClicked}>Search for places</button>\r\n                <button className=\"today-weather-btn today-weather-gps-btn\" onClick={onGps}>\r\n                    <span className=\"material-icons\">gps_fixed</span>\r\n                </button>\r\n            </div>\r\n            \r\n            <div className=\"today-weather-info-wrapper\">\r\n                <img \r\n                    className=\"today-weather-image\"\r\n                    src={icon} \r\n                    alt=\"figure representing the weather\" />\r\n\r\n                <p>\r\n                    <span className=\"today-weather-temperature-number\">{temperature}</span>\r\n                    <span className=\"today-weather-temperature-sign\">º{state.useCelsius ? 'C' : 'F'}</span>\r\n                </p>\r\n                \r\n                <p className=\"today-weather-climate\">{todayData.weather_state_name}</p>\r\n                <p className=\"today-weather-time-date\">Today - {date}</p>\r\n                \r\n                <div className=\"today-weather-location-div\">\r\n                    <span className=\"material-icons\">place</span>\r\n                    <p>{state.location}</p>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n    const SearchScreen = (\r\n        <Fragment>\r\n                <div className=\"tw-close-wrapper\">\r\n                    <button className=\"tw-search-btn-x\" onClick={onCloseButtonClicked}>X</button>\r\n                </div>\r\n                <form>\r\n                    <div className=\"tw-search-div\">\r\n                        <div className=\"tw-searchbar-btn\">\r\n                            <input \r\n                                onChange={onSearchChanged} \r\n                                placeholder=\"search location\" \r\n                                type=\"text\" />\r\n\r\n                            <button onClick={onSearchBtnClicked}>Search</button>       \r\n                        </div>\r\n                        <select onChange={onSelectedOption}>\r\n                            {\r\n                                state.options.map((val, i) => (\r\n                                    <option key={i} value={val.id}>{val.city}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n        </Fragment>\r\n    )\r\n    \r\n    return (\r\n        <div className=\"today-weather-wrapper\">\r\n            {state.searchEnabled ? SearchScreen : WeatherScreen}\r\n        </div>\r\n    )\r\n}","// this has the same structure as the obj from the api on the 'consolidated_weather' attribute\r\nconst initialWeatherState = {\r\n    weather_state_name: '',\r\n    weather_state_abbr: '',\r\n    wind_direction_compass: '',\r\n    applicable_date: '',\r\n    min_temp: 0,\r\n    max_temp: 0,\r\n    wind_speed: 0,\r\n    wind_direction: 0,\r\n    air_pressure: 0,\r\n    humidity: 0,\r\n    visibility: 0,\r\n}\r\n\r\nconst initialState = { \r\n    input: '', \r\n    options: [], \r\n    searchEnabled: false, \r\n    selectedId: 0,\r\n    location: '',\r\n    weatherData: [initialWeatherState],\r\n    gpsCoords: null,\r\n    useCelsius: true\r\n}\r\n\r\nexport default initialState\r\n","import { getWeatherDataById, getCityByGeocalization } from '../api/WeatherAPIWrapper'\r\nimport { useState, useEffect } from \"react\"\r\nimport HightlightsArea from \"../components/HightlightsArea\"\r\nimport TodayWeather from \"../components/TodayWeather\"\r\nimport initialState from '../state'\r\n\r\nexport default function MainScreen(props) {\r\n    const [state, setState] = useState(initialState)\r\n    \r\n    const setGPSLocation = async (coords) => {\r\n        // gets loc from the api and store it to be used later\r\n        const data = await getCityByGeocalization(coords.latitude, coords.longitude)\r\n        if (data.lenght === 0) {\r\n            alert('Your location could not be found')\r\n            return\r\n        }\r\n        const nearestLocation = data[0]\r\n        const locationName = nearestLocation['title']\r\n        const id = nearestLocation['woeid']\r\n        setState({...state, weatherData: data, location: locationName, selectedId: id, gpsCoords: coords})\r\n        await setWeatherData(id) // i hope will update the state now, or else i'll need a settimeout\r\n    }\r\n\r\n    const askForGPS = async () => {\r\n        if (!(\"geolocation\" in navigator)) {\r\n            alert(\"Your browser do not support geolocalization.\")\r\n            return\r\n        }\r\n\r\n        if (state.gpsCoords === null) {\r\n            // since this func can be called only once\r\n            navigator.geolocation.watchPosition(async (pos) => {\r\n                await setGPSLocation(pos.coords)\r\n            })\r\n        } else {\r\n            setGPSLocation(state.gpsCoords)\r\n        }\r\n    }\r\n\r\n    const setWeatherData = async (id) => {\r\n        if (id === 0)\r\n            return\r\n        \r\n        const data = await getWeatherDataById(id)\r\n        const weather = data.weatherData\r\n        const loc = data.location\r\n\r\n        if (data.length === 0 || weather.length === 0)\r\n            return\r\n\r\n        setState({...state, weatherData: weather, location: loc, searchEnabled: false})\r\n    }\r\n\r\n    useEffect(()=>{\r\n        askForGPS()\r\n    }, []) \r\n\r\n    return (\r\n        <div className=\"main-screen-wrapper\">\r\n            <TodayWeather state={state} setState={setState} setWeatherData={setWeatherData} onGps={askForGPS} />\r\n            <HightlightsArea state={state} setState={setState} weatherData={state.weatherData} />\r\n        </div>\r\n    )\r\n}","import MainScreen from './screens/MainScreen'\nimport './Media.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainScreen />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}